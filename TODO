TODO
!-Index the value column of the sensor reads for minimum and maximum
- Change the filtering operations (e.g., outliercache) so that the raw value is always stored in the database
- Make the outliercache filter based on the expected sensor range (e.g. -20-50 in temperature and 800-1200 in pressure) so as to not be overly sensitive when around 0)
- Add logging to the daemon
?- Change the sensor configuration to be a ruby DSL and make it a daemon config
- Split classes into one per file with corresponding test (rails style)
- Verify inputs on the server to make sure it never crashes
- Remove the chart configuration options from the saal_chart script
?- Remove Sensors and Charts and move their functionality to Sensor and Chart
- Add an init.d file to the package (and possibly an installer script for ubuntu/debian)
- Add interface that does retries for reading as well as writing (e.g., dinrelay confirm state change)
DONE
X- Make the server bind only to a certain interface (not applicable)
X- Override OWNet::Connection with a mock object so that owserver is not needed
X- Implement GET_ALL
X- Multithread the server
X- Make connections persistant
- Find a better way to handle stdin, stdout, stderr for tests (an option maybe)
- Implement the charts
- Write client library for server part of daemon
- Implement AVERAGE
- Make sensor reads uncached
- Refactor daemon.rb to pull out its daemon creating code from the process 
- Create a client/server framework to ask the server for values
- Make the date returned by GET the date of the last read (GET doesn't return
  a date now
- Implement monthly, yearly and 10-day average charts
- Add outlier detection and removal
- Add filter support to sensor reads (e.g., altitude compensation for pressure)
