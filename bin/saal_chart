#!/usr/bin/env ruby
# encoding: utf-8

NUM_VALUES_SMALL = 500 # Datapoints in "small" charts
NUM_VALUES_LARGE = 150 # Datapoints in "large" charts
LARGE_CHART_THRESHOLD = 30*24*60*60 # Threshold for a large chart (in seconds)

require File.dirname(__FILE__)+'/../lib/saal.rb'

def usage
  $stderr.puts("Usage: saal_chart <chart dir>")
end

if ARGV.size != 1
  usage
  exit (2)
end

MAX_RANGES = {:temperature=>[-10,70], 
              :humidity=>[0,110], 
              :pressure=>[900,1200]}

TYPES = {:temperature => "ÂºC", :humidity => "%", :pressure => "hPa"}


SAAL::Charts.new.each do |chart|
  $stderr.puts "Generating chart #{chart.name}"

  pngfile = ARGV[0]+'/chart-'+chart.name.to_s+'.png'
  ymlfile = ARGV[0]+'/chart-'+chart.name.to_s+'.yml'

  @mins = chart.minimum
  @maxs = chart.maximum
  @avgs = chart.average
  @minmax = {}
  chart.sensors.each do |s|
    s = s.name.to_sym
    @minmax[s] = {:maximum => @maxs[s], :minimum => @mins[s], :average => @avgs[s]}
  end

  File.open(ymlfile, 'w').write(YAML::dump(@minmax))

  def normalize_data(data, min, max)
    data.map do |i|
      if i.nil?
        -1.0
      elsif i < min
        0.0
      elsif i > max
        100.0
      else
        (((i-min)/(max-min).to_f)*1000).round/10.0
      end
    end
  end

  @periodnames = chart.periodnames
  @numperiods = @periodnames.size
  num_values = ((chart.to-chart.from)>LARGE_CHART_THRESHOLD) ?
               NUM_VALUES_LARGE : 
               NUM_VALUES_SMALL

  @averages = chart.average(num_values)
  @ranges = {}

  # First find the smallest interval that fits all sensors for each type
  @data = chart.sensors.map do |sensor|
    avgs = @averages[sensor.name.to_sym]

    min = avgs.select{|o| o != nil}.min
    max = avgs.select{|o| o != nil}.max
    if min and max
      range = [(min/5).floor*5, (max/5).ceil*5]
      @ranges[sensor.sensor_type] ||= range
      previous = @ranges[sensor.sensor_type]
      @ranges[sensor.sensor_type] = [[range[0],previous[0]].min, 
                                     [range[1],previous[1]].max]
    end
  end

  # Then clip those intervals to MAX_RANGES
  @data = chart.sensors.map do |sensor|
    maxrange = MAX_RANGES[sensor.sensor_type]
    @ranges[sensor.sensor_type] ||= maxrange
    previous = @ranges[sensor.sensor_type]
    @ranges[sensor.sensor_type] = [[maxrange[0],previous[0]].max, 
                                   [maxrange[1],previous[1]].min]
  end

  # Finally use those intervals to normalize the data
  @data = chart.sensors.map do |sensor|
    normalize_data(@averages[sensor.name.to_sym], *@ranges[sensor.sensor_type])
  end

  @dataurl = @data.map {|values| values.join(",")}.join('|')

  r = {}
  case chart.alignlabels
  when :center
    @periodnamesurl = "||"+@periodnames.join('||')+"||"
  when :left
    @periodnamesurl = "|"+@periodnames.join('|')+"||"
    r[:chxs] = "0,555555,11,-1,lt"
  end
  @xincr = 100.0/@numperiods.to_f*10000.truncate.to_f/10000

  @axes = []
  @ranges.each do |type, range| 
    min,max = range
    step = (max-min).to_f/4.0
    steps = (0..4).map{|i| (min+i*step).to_i.to_s}
    steps[0] = "#{min} #{TYPES[type]}"
    steps[4] = "#{max} #{TYPES[type]}"
    @axes << steps.join("||")
  end
  # Duplicate the axis if there's only one
  @axes *= 2 if @axes.size == 1
  # Alternate between left and right axes
  @axisset = (['y','r']*@axes.size)[0..@axes.size-1].join(",")
  @axes = @axes.each_with_index.map {|a,i| "#{i+1}:|#{a}"}.join("|")

  r[:chof] = "png"
  r[:chs] = "700x300"
  r[:cht] = "lc"
  r[:chco] = "00ff00,ff0000,0000ff,ff9933,800080"
  r[:chxt] = "x,#{@axisset}"
  r[:chxl] = "0:#{@periodnamesurl}#{@axes}"
  r[:chg] = "#{@xincr},12.5,1,5"
  r[:chd] = "t:#{@dataurl}"

  @url = "http://chart.apis.google.com/chart?&"
  @postdata = r.map{|k,v| k.to_s+"="+v}.join("&")


  system "wget --quiet \"#{@url}\" --post-data=\"#{@postdata}\" -O #{pngfile}"
end
