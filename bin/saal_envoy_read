#!/usr/bin/env ruby

require File.dirname(__FILE__)+'/../lib/saal.rb'

if ARGV.size != 2
  $stderr.puts "USAGE: saal_envoy_read <host> <token>"
  exit(1)
end

config = {:host => ARGV[0], :token => ARGV[1]}

def fdisp(val)
  if val
    '%10.0f' % val
  else
    "       n/a"
  end
end

def fdispk(val)
  if val
    '%10.2f' % (val / 1000.0)
  else
    "       n/a"
  end
end

def fdisp_dec(val)
  if val
    '%10.2f' % val
  else
    "       n/a"
  end
end

def fdispd(val)
  if val
    Time.at(val.to_i).strftime("%Y-%m-%d %k:%M:%S")
  else
    "n/a"
  end
end

def l(vals, name)
  sensor = vals[name]
  if sensor
    sensor.read
  else
    nil
  end
end

def lratio(vals, name1, name2)
  v1 = l(vals, name1)
  v2 = l(vals, name2)
  if v1 && v2
    v1 / v2
  else
    nil
  end
end

ac_quality = SAAL::Envoy::ACQuality::new(config).create_sensors

puts " ========= AC QUALITY ========"
puts "        voltage (V)  freq (Hz)"
def qual_line(vals,name, type)
  puts " #{name} \
#{fdisp_dec(l(vals,"ac_#{type}_voltage"))} \
#{fdisp_dec(l(vals,"ac_#{type}_frequency"))} \
"
end
qual_line(ac_quality, "Total: ", "total")
qual_line(ac_quality, "Phase1:", "phase1")
qual_line(ac_quality, "Phase2:", "phase2")
qual_line(ac_quality, "Phase3:", "phase3")

production = SAAL::Envoy::PowerEnergy::new(config).create_sensors

puts ""
puts " ============ TRUE POWER (W) ============  ======= TRUE ENERGY (kWh) ======="
puts "        consumption production        net  consumption production        net"
def p_line(vals, name, type, metric)
  puts " #{name} \
#{fdisp(l(vals,"pv_total_consumption_#{type}_#{metric}_now"))} \
#{fdisp(l(vals,"pv_production_#{type}_#{metric}_now"))} \
#{fdisp(l(vals,"pv_net_consumption_#{type}_#{metric}_now"))}   \
#{fdispk(l(vals,"pv_total_consumption_#{type}_#{metric}h_lifetime"))} \
#{fdispk(l(vals,"pv_production_#{type}_#{metric}h_lifetime"))} \
#{fdispk(l(vals,"pv_net_consumption_#{type}_#{metric}h_lifetime"))} \
"
end
p_line(production, "Total: ", "total", "w")
p_line(production, "Phase1:", "phase1", "w")
p_line(production, "Phase2:", "phase2", "w")
p_line(production, "Phase3:", "phase3", "w")
puts " Total Inverters:   \
#{fdisp(l(production,"pv_production_inverters_w_now"))} \
                        \
#{fdispk(l(production,"pv_production_inverters_wh_lifetime"))} \
"

puts ""
puts " ========== APPARENT POWER (VA) ========= ===== APPARENT ENERGY (kVAh) ===="
puts "        consumption production        net  consumption production        net"
p_line(production, "Total: ", "total", "va")
p_line(production, "Phase1:", "phase1", "va")
p_line(production, "Phase2:", "phase2", "va")
p_line(production, "Phase3:", "phase3", "va")

def pf_line(vals, name, type, metric)
  pf_total_consumption_instant = lratio(vals,"pv_total_consumption_#{type}_w_now","pv_total_consumption_#{type}_va_now")
  pf_total_production_instant = lratio(vals,"pv_production_#{type}_w_now","pv_production_#{type}_va_now")
  pf_net_production_instant = lratio(vals,"pv_net_consumption_#{type}_w_now","pv_net_consumption_#{type}_va_now")

  pf_total_consumption_lifetime = lratio(vals,"pv_total_consumption_#{type}_wh_lifetime","pv_total_consumption_#{type}_vah_lifetime")
  pf_total_production_lifetime = lratio(vals,"pv_production_#{type}_wh_lifetime","pv_production_#{type}_vah_lifetime")
  pf_net_production_lifetime = lratio(vals,"pv_net_consumption_#{type}_wh_lifetime","pv_net_consumption_#{type}_vah_lifetime")

  puts " #{name} \
#{fdisp_dec(pf_total_consumption_instant)} \
#{fdisp_dec(pf_total_production_instant)} \
#{fdisp_dec(pf_net_production_instant)}   \
#{fdisp_dec(pf_total_consumption_lifetime)} \
#{fdisp_dec(pf_total_production_lifetime)} \
#{fdisp_dec(pf_net_production_lifetime)} \
"
end

puts ""
puts " ========= INSTANT POWER FACTOR ========= ====== LIFETIME POWER FACTOR ====="
puts "        consumption production        net  consumption production        net"
pf_line(production, "Total: ", "total", "va")
pf_line(production, "Phase1:", "phase1", "va")
pf_line(production, "Phase2:", "phase2", "va")
pf_line(production, "Phase3:", "phase3", "va")

puts ""
envoy = SAAL::Envoy::Inverters::new(config.merge({:types => ["w_now", "last_report_date", "w_max"]}))
envoy.set_all_inverters!
inverters = envoy.create_sensors
puts " Found #{envoy.inverters.size} inverters"
envoy.inverters.each do |serial|
  puts " INVERTER: #{serial} \
date:#{fdispd(l(inverters,"inverters_#{serial}_last_report_date"))} \
lastWatts:#{l(inverters,"inverters_#{serial}_w_now")} \
maxWatts:#{l(inverters,"inverters_#{serial}_w_max")} \
"
end
