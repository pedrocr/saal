#!/usr/bin/env ruby

require File.dirname(__FILE__)+'/../lib/saal.rb'

if ARGV.size != 3
  $stderr.puts "USAGE: saal_envoy_read <host> <user> <password>"
  exit(1)
end

def fdisp(val)
  if val
    '%10.0f' % val
  else
    "       n/a"
  end
end

def fdispk(val)
  if val
    '%10.2f' % (val / 1000.0)
  else
    "       n/a"
  end
end

def fdisp_dec(val)
  if val
    '%10.2f' % val
  else
    "       n/a"
  end
end

ac_quality = SAAL::Envoy::ACQuality::new(:host => ARGV[0]).create_sensors

puts " ========= AC QUALITY ========"
puts "        voltage (V)  freq (Hz)"
def qual_line(vals,name, type)
  puts " #{name} \
#{fdisp_dec(vals["ac_#{type}_voltage"].read)} \
#{fdisp_dec(vals["ac_#{type}_frequency"].read)} \
"
end
qual_line(ac_quality, "Total: ", "total")
qual_line(ac_quality, "Phase1:", "phase1")
qual_line(ac_quality, "Phase2:", "phase2")
qual_line(ac_quality, "Phase3:", "phase3")

production = SAAL::Envoy::PowerEnergy::new(:host => ARGV[0]).create_sensors

puts ""
puts " ============ TRUE POWER (W) ============  ======= TRUE ENERGY (kWh) ======="
puts "        consumption production        net  consumption production        net"
def p_line(vals, name, type, metric)
  puts " #{name} \
#{fdisp(vals["pv_total_consumption_#{type}_#{metric}_now"].read)} \
#{fdisp(vals["pv_production_#{type}_#{metric}_now"].read)} \
#{fdisp(vals["pv_net_consumption_#{type}_#{metric}_now"].read)}   \
#{fdispk(vals["pv_total_consumption_#{type}_#{metric}h_lifetime"].read)} \
#{fdispk(vals["pv_production_#{type}_#{metric}h_lifetime"].read)} \
#{fdispk(vals["pv_net_consumption_#{type}_#{metric}h_lifetime"].read)} \
"
end
p_line(production, "Total: ", "total", "w")
p_line(production, "Phase1:", "phase1", "w")
p_line(production, "Phase2:", "phase2", "w")
p_line(production, "Phase3:", "phase3", "w")
puts " Total Inverters:   \
#{fdisp(production["pv_production_inverters_w_now"].read)} \
                        \
#{fdispk(production["pv_production_inverters_wh_lifetime"].read)} \
"

puts ""
puts " ========== APPARENT POWER (VA) ========= ===== APPARENT ENERGY (kVAh) ===="
puts "        consumption production        net  consumption production        net"
p_line(production, "Total: ", "total", "va")
p_line(production, "Phase1:", "phase1", "va")
p_line(production, "Phase2:", "phase2", "va")
p_line(production, "Phase3:", "phase3", "va")

def pf_line(vals, name, type, metric)
  pf_total_consumption_instant = vals["pv_total_consumption_#{type}_w_now"].read / vals["pv_total_consumption_#{type}_va_now"].read
  pf_total_production_instant = vals["pv_production_#{type}_w_now"].read / vals["pv_production_#{type}_va_now"].read
  pf_net_production_instant = vals["pv_net_consumption_#{type}_w_now"].read / vals["pv_net_consumption_#{type}_va_now"].read

  pf_total_consumption_lifetime = vals["pv_total_consumption_#{type}_wh_lifetime"].read / vals["pv_total_consumption_#{type}_vah_lifetime"].read
  pf_total_production_lifetime = vals["pv_production_#{type}_wh_lifetime"].read / vals["pv_production_#{type}_vah_lifetime"].read
  pf_net_production_lifetime = vals["pv_net_consumption_#{type}_wh_lifetime"].read / vals["pv_net_consumption_#{type}_vah_lifetime"].read

  puts " #{name} \
#{fdisp_dec(pf_total_consumption_instant)} \
#{fdisp_dec(pf_total_production_instant)} \
#{fdisp_dec(pf_net_production_instant)}   \
#{fdisp_dec(pf_total_consumption_lifetime)} \
#{fdisp_dec(pf_total_production_lifetime)} \
#{fdisp_dec(pf_net_production_lifetime)} \
"
end

puts ""
puts " ========= INSTANT POWER FACTOR ========= ====== LIFETIME POWER FACTOR ====="
puts "        consumption production        net  consumption production        net"
pf_line(production, "Total: ", "total", "va")
pf_line(production, "Phase1:", "phase1", "va")
pf_line(production, "Phase2:", "phase2", "va")
pf_line(production, "Phase3:", "phase3", "va")

puts ""
envoy = SAAL::Envoy::Inverters::new(
  :host => ARGV[0],
  :user => ARGV[1],
  :password => ARGV[2],
)
envoy.set_all_inverters!
inverters = envoy.create_sensors
puts "Found #{envoy.inverters.size} inverters"
envoy.inverters.each do |serial|
  puts "INVERTER: #{serial} \
date:#{inverters["inverter_#{serial}_last_report_date"].read} \
lastWatts:#{inverters["inverter_#{serial}_w_now"].read} \
maxWatts:#{inverters["inverter_#{serial}_w_max"].read} \
"
end
