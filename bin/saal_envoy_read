#!/usr/bin/env ruby

require File.dirname(__FILE__)+'/../lib/saal.rb'

if ARGV.size != 3
  $stderr.puts "USAGE: saal_envoy_read <host> <user> <password>"
  exit(1)
end

production = SAAL::Envoy::Power::new(:host => ARGV[0]).create_sensors

def fdisp(val)
  if val
    '%10.0f' % val
  else
    "n/a"
  end
end

def fdispk(val)
  if val
    '%10.2f' % (val / 1000.0)
  else
    "n/a"
  end
end

def fdisp_dec(val)
  if val
    '%10.2f' % val
  else
    "n/a"
  end
end

def fdisp_diff(val1, val2)
  if val1 && val2
    fdisp(val1 - val2)
  else
    "n/a"
  end
end

def fdispk_diff(val1, val2)
  if val1 && val2
    fdispk((val1 - val2))
  else
    "n/a"
  end
end

#puts "VOLTAGES (net-consumption, total-consumption, production)"
#puts "Total: \
##{fdisp(production["consumption_net_rms_voltage"].read)} \
##{fdisp(production["consumption_total_rms_voltage"].read)} \
##{fdisp(production["production_rms_voltage"].read)} \
#"
#puts "Line1: \
##{fdisp(production["consumption_net_phase1_rms_voltage"].read)} \
##{fdisp(production["consumption_total_phase1_rms_voltage"].read)} \
##{fdisp(production["production_phase1_rms_voltage"].read)} \
#"
#puts "Line2: \
##{fdisp(production["consumption_net_phase2_rms_voltage"].read)} \
##{fdisp(production["consumption_total_phase2_rms_voltage"].read)} \
##{fdisp(production["production_phase2_rms_voltage"].read)} \
#"
#puts "Line3: \
##{fdisp(production["consumption_net_phase3_rms_voltage"].read)} \
##{fdisp(production["consumption_total_phase3_rms_voltage"].read)} \
##{fdisp(production["production_phase3_rms_voltage"].read)} \
#"

puts ""
puts "TRUE POWER (W) (net-consumption, total-consumption, production, diff)"
puts "Total: \
#{fdisp(production["consumption_net_w_now"].read)} \
#{fdisp(production["consumption_total_w_now"].read)} \
#{fdisp(production["production_w_now"].read)} \
#{fdisp_diff(production["consumption_total_w_now"].read, production["production_w_now"].read)} \
"
puts "Line1: \
#{fdisp(production["consumption_net_phase1_w_now"].read)} \
#{fdisp(production["consumption_total_phase1_w_now"].read)} \
#{fdisp(production["production_phase1_w_now"].read)} \
#{fdisp_diff(production["consumption_total_phase1_w_now"].read, production["production_phase1_w_now"].read)} \
"
puts "Line2: \
#{fdisp(production["consumption_net_phase2_w_now"].read)} \
#{fdisp(production["consumption_total_phase2_w_now"].read)} \
#{fdisp(production["production_phase2_w_now"].read)} \
#{fdisp_diff(production["consumption_total_phase2_w_now"].read, production["production_phase2_w_now"].read)} \
"
puts "Line3: \
#{fdisp(production["consumption_net_phase3_w_now"].read)} \
#{fdisp(production["consumption_total_phase3_w_now"].read)} \
#{fdisp(production["production_phase3_w_now"].read)} \
#{fdisp_diff(production["consumption_total_phase3_w_now"].read, production["production_phase3_w_now"].read)} \
"

puts ""
puts "APPARENT POWER (VA) (net-consumption, total-consumption, production, diff)"
puts "Total: \
#{fdisp(production["consumption_net_va_now"].read)} \
#{fdisp(production["consumption_total_va_now"].read)} \
#{fdisp(production["production_va_now"].read)} \
#{fdisp_diff(production["consumption_total_va_now"].read, production["production_va_now"].read)} \
"
puts "Line1: \
#{fdisp(production["consumption_net_phase1_va_now"].read)} \
#{fdisp(production["consumption_total_phase1_va_now"].read)} \
#{fdisp(production["production_phase1_va_now"].read)} \
#{fdisp_diff(production["consumption_total_phase1_va_now"].read, production["production_phase1_va_now"].read)} \
"
puts "Line2: \
#{fdisp(production["consumption_net_phase2_va_now"].read)} \
#{fdisp(production["consumption_total_phase2_va_now"].read)} \
#{fdisp(production["production_phase2_va_now"].read)} \
#{fdisp_diff(production["consumption_total_phase2_va_now"].read, production["production_phase2_va_now"].read)} \
"
puts "Line3: \
#{fdisp(production["consumption_net_phase3_va_now"].read)} \
#{fdisp(production["consumption_total_phase3_va_now"].read)} \
#{fdisp(production["production_phase3_va_now"].read)} \
#{fdisp_diff(production["consumption_total_phase3_va_now"].read, production["production_phase3_va_now"].read)} \
"

puts ""
puts "TRUE POWER CONSUMPTION (kWh) (net-consumption, total-consumption, production, diff, inverters)"
puts "Total: \
#{fdispk(production["consumption_net_wh_lifetime"].read)} \
#{fdispk(production["consumption_total_wh_lifetime"].read)} \
#{fdispk(production["production_wh_lifetime"].read)} \
#{fdispk_diff(production["consumption_total_wh_lifetime"].read, production["production_wh_lifetime"].read)} \
#{fdispk(production["production_inverters_wh_lifetime"].read)} \
"
puts "Line1: \
#{fdispk(production["consumption_net_phase1_wh_lifetime"].read)} \
#{fdispk(production["consumption_total_phase1_wh_lifetime"].read)} \
#{fdispk(production["production_phase1_wh_lifetime"].read)} \
#{fdispk_diff(production["consumption_total_phase1_wh_lifetime"].read, production["production_phase1_wh_lifetime"].read)} \
"
puts "Line2: \
#{fdispk(production["consumption_net_phase2_wh_lifetime"].read)} \
#{fdispk(production["consumption_total_phase2_wh_lifetime"].read)} \
#{fdispk(production["production_phase2_wh_lifetime"].read)} \
#{fdispk_diff(production["consumption_total_phase2_wh_lifetime"].read, production["production_phase2_wh_lifetime"].read)} \
"
puts "Line3: \
#{fdispk(production["consumption_net_phase3_wh_lifetime"].read)} \
#{fdispk(production["consumption_total_phase3_wh_lifetime"].read)} \
#{fdispk(production["production_phase3_wh_lifetime"].read)} \
#{fdispk_diff(production["consumption_total_phase3_wh_lifetime"].read, production["production_phase3_wh_lifetime"].read)} \
"

puts ""
puts "APPARENT POWER CONSUMPTION (kVAh) (net-consumption, total-consumption, production, diff)"
puts "Total: \
#{fdispk(production["consumption_net_vah_lifetime"].read)} \
#{fdispk(production["consumption_total_vah_lifetime"].read)} \
#{fdispk(production["production_vah_lifetime"].read)} \
#{fdispk_diff(production["consumption_total_vah_lifetime"].read, production["production_vah_lifetime"].read)} \
"
puts "Line1: \
#{fdispk(production["consumption_net_phase1_vah_lifetime"].read)} \
#{fdispk(production["consumption_total_phase1_vah_lifetime"].read)} \
#{fdispk(production["production_phase1_vah_lifetime"].read)} \
#{fdispk_diff(production["consumption_total_phase1_vah_lifetime"].read, production["production_phase1_vah_lifetime"].read)} \
"
puts "Line2: \
#{fdispk(production["consumption_net_phase2_vah_lifetime"].read)} \
#{fdispk(production["consumption_total_phase2_vah_lifetime"].read)} \
#{fdispk(production["production_phase2_vah_lifetime"].read)} \
#{fdispk_diff(production["consumption_total_phase2_vah_lifetime"].read, production["production_phase2_vah_lifetime"].read)} \
"
puts "Line3: \
#{fdispk(production["consumption_net_phase3_vah_lifetime"].read)} \
#{fdispk(production["consumption_total_phase3_vah_lifetime"].read)} \
#{fdispk(production["production_phase3_vah_lifetime"].read)} \
#{fdispk_diff(production["consumption_total_phase3_vah_lifetime"].read, production["production_phase3_vah_lifetime"].read)} \
"

puts ""
envoy = SAAL::Envoy::Inverters::new(
  :host => ARGV[0],
  :user => ARGV[1],
  :password => ARGV[2],
)
envoy.set_all_inverters!
inverters = envoy.create_sensors
puts "Found #{envoy.inverters.size} inverters"
envoy.inverters.each do |serial|
  puts "INVERTER: #{serial} \
date:#{inverters["inverter_#{serial}_last_report_date"].read} \
lastWatts:#{inverters["inverter_#{serial}_w_now"].read} \
maxWatts:#{inverters["inverter_#{serial}_w_max"].read} \
"
end
